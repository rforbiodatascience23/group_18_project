---
title: "04_augment.qmd"
format: html
editor: visual
---

# Augment

## Load .tsv files from data folder

```{r}
dat_clean1 <- read_tsv(
  file = "~/group_18_project/data/02_dat_clean1.tsv",
  show_col_types = FALSE)

dat_clean2 <- read_tsv(
  file = "~/group_18_project/data/02_dat_clean2.tsv",
  show_col_types = FALSE)
```

\
Data augmentation for a TSV (Tab-Separated Values) dataset typically involves creating new variations of the existing data by applying transformations that preserve the tabular structure. Some common techniques for augmenting TSV datasets include:

1.  **Row-wise Perturbations:**

    -   Introduce noise or perturbations to the values within individual rows, such as adding random noise to numeric columns or perturbing categorical values.

2.  **Column-wise Transformations:**

    -   Apply transformations to entire columns, like scaling numeric values, one-hot encoding categorical variables, or shuffling the order of rows.

3.  **Duplicate and Shuffle:**

    -   Duplicate rows and shuffle the order of rows in the dataset to create new permutations of the existing data.

4.  **Random Subsetting:**

    -   Randomly select a subset of rows or columns to create variations in the dataset.

5.  **Missing Values:**

    -   Introduce missing values in a controlled manner, simulating scenarios where data might be incomplete.

The key is to ensure that the augmented data retains the structure and statistical characteristics of the original dataset, preserving the relationships between features. Careful consideration is necessary to choose augmentation techniques that make sense for the specific characteristics of the data and the goals of the machine learning task. Additionally, the impact of data augmentation on model performance should be validated through proper evaluation procedures.

### Save the augmented data as 03_dat_aug.tsv in data folder

```{r}

write.table(x = clean_data1,
            file = "~/group_18_project/data/03_dat_aug1.tsv", 
            sep = "\t", 
            quote = TRUE,
            row.names = FALSE)

write.table(x = clean_data2,
            file = "~/group_18_project/data/03_dat_aug2.tsv", 
            sep = "\t", 
            quote = TRUE,
            row.names = FALSE)
```
