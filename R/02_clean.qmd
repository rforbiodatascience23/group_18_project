---
title: "02_clean.qmd"
format: html
editor: visual
---

# Clean

## Load .tsv files from data folder

```{r}

dat_load1 <- read_tsv(
  file = "~/group_18_project/data/01_dat_load1.tsv",
  show_col_types = FALSE)

dat_load2 <- read_tsv(
  file = "~/group_18_project/data/01_dat_load2.tsv",
  show_col_types = FALSE)

dat_load3 <- read_tsv(
  file = "~/group_18_project/data/01_dat_load3.tsv",
  show_col_types = FALSE)
```

## 'Clean' variable names with janitor library

The `janitor` package was used to enhance the quality of the dataset by making sure that the variable names would be clean and consistent. Primarily, the `clean_names()` function was used to simplify and standardize the column names, which would help later on in cleaning the dataset.

```{r}

dat_load1 <- dat_load1 |> 
  clean_names()

dat_load2 <- dat_load2 |> 
    clean_names()

dat_load3 <- dat_load3 |> 
    clean_names()
```

## Clean dat_load1 (data from HC patients)

### Remove rows that do not correspond to patients and last column called 'Notes'

```{r}

dat_load1 <- dat_load1 |> 
  slice(1:80) |> select(1:28)
```

### Give shorter names to the variables

The `clean_names()` function from `janitor` was used again to change the column headers to create standardized names and an easier to use structure.

```{r}

# Rename variables 
change_variable_names <- c(
  date_of_birth = "dob",
  hematuria_grade = "ctcae_4_0_hematuria_grade",
  comorbidities = "comorbidities_dm_stroke_pvd_cirrhosis_drug_abuse_alcoholism_tobacco_hx_mi_last_6mo_chf_copd_esrd",
  clinical_cancer = "type_bladder_prostate_pathologic_clinial_staging_of_cancer",
  radiation_type = "type_of_radation",
  radiation_dosage = "dose_of_radation_gy",
  start_end_radiation = "start_date_of_radiation_end_date_of_radiation",
  radiation_duration = "duration_of_radiation_days",
  number_of_admissions_with_urology_consultation = "number_of_admissions_including_er_visits_requiring_urology_consultation",
  number_of_hc_icu_admits = "number_of_icu_admits_with_hemorrhgic_cystits",
  los_for_each_admission = "los_for_each_admission_days",
  radiation_completion_to_first_hc = "time_passed_since_completion_of_radiation_treatment_months_and_first_incidence_hc",
  number_of_cystoscopies = "number_of_cystoscopies_with_clot_evacuation_and_or_fulguration_of_bleeders",
  formalin_instillation = "number_of_times_requiring_formalin_instillation",
  alum_instillation = "number_of_times_requiring_alum_instillation",
  silver_nit_instillation = "number_of_times_requiring_silver_nitrate_instillation",
  amicar_instillation = "number_of_times_requiring_amicar_instillation",
  hyperbaric_o2 = "number_times_requiring_hyperbaric_o2_tx_days",
  surgery_for_urinary_diversion = "surgery_for_urinary_diversion_required_if_yes_what_type",
  number_transfusions = "number_of_units_of_p_rb_cs_tranfused",
  hospitalization_complications = "complications_during_hospitalization_uti_pyelonephritis_urosepsis_hydronephrosis_aki_other"
  )


dat_load1 <- rename(dat_load1, 
                    any_of(change_variable_names))
```

### Correct spelling mistakes, absence of comas in strings in observations, change data types, remove messy columns

The `mutate` function from the `dplyr` package was used to create new variables for the data corrections and transformations. This included converting 'date_of_birth' to a standardized Date format using the `ymd` function from the `lubridate` package. The `str_replace_all` function from the `stringr` package refined string patterns, such as removing "Gy" from 'radiation_dosage' and replacing specific phrases in 'hospitalization_complications'. Additionally, the `ifelse` function was used for precise adjustments, such as standardizing 'ethnicity' and handling specific conditions within the dataset. All these functions created an accurate data representation and standardized formatting to prepare for the analysis.

```{r}

dat_load1 <- dat_load1 |> 
  mutate(
  
    # Make variable type as Date
    date_of_birth = ymd(date_of_birth),
    
    # ethnicity - make all names lower case, change AA to african american
    ethnicity = ifelse(ethnicity == "AA", "african_american", tolower(ethnicity)),
    
    # radiation_dosage - remove characters "Gy" make the observatons as num
    radiation_dosage =  str_replace_all(radiation_dosage, "Gy", ""),
    radiation_dosage = round(as.numeric(radiation_dosage),2),
    
    # comorbidities add "," to allow separation by ",", str_replace did not work
    comorbidities = ifelse(row_number() == 2, "HTN, A. fib, DM, CHF, tobacco", comorbidities),

    # los_for_each_admission_days replace spaces with comas 
    los_for_each_admission = str_replace_all(los_for_each_admission, "\\s+", " "),
    los_for_each_admission = str_replace_all(los_for_each_admission, ", ", " "),
    los_for_each_admission = str_replace_all(los_for_each_admission, " ", ","),
    los_for_each_admission = ifelse(row_number() == 20, "1", los_for_each_admission),
    los_for_each_admission = ifelse(row_number() == 77, "3,1,4,5,1", los_for_each_admission),

    # hospitalization_complications add coma to replace 'which' and 'and' 
    hospitalization_complications = str_replace_all(hospitalization_complications, "and", ","),
    hospitalization_complications = str_replace_all(hospitalization_complications, "which", ","),
    
    # surgery_for_urinary_diversion values to yes or no only
    surgery_for_urinary_diversion = ifelse(tolower(surgery_for_urinary_diversion) == "no", "no", "yes"),

    # hyperbaric_o2 replace unknown string with NA 
    hyperbaric_o2 = ifelse(str_detect(tolower(hyperbaric_o2), "unknown"), NA, hyperbaric_o2)) |>
  select(
    -hospital_site,     
    -start_end_radiation,    
    -dates_of_admissions)
```

### Change names in radiation_type so they fit with the naming in dat_load2 and dat_load3

The `str_replace` function from `stringr` was used to standardize the names in the radiation_type column. `ifelse` was then used for the rows that did not work with str_replace, to precisely adjust these names correctly.

```{r}

dat_load1 <- dat_load1 |>
  mutate(
    radiation_type = str_replace(radiation_type,"Adjuvant EBRT s/p prostatectomy for a pT4N0" , "EBRT,adjuvant"),
    radiation_type = str_replace(radiation_type,"Adjuvant EBRT s/p prostatectomy with positive LNs" , "EBRT,adjuvant"),
    radiation_type = str_replace(radiation_type,"EBRT then seeds" , "EBRT"),
    radiation_type = str_replace(radiation_type,"EBRT, seeds" , "EBRT"),
    radiation_type = str_replace(radiation_type,"EBRT, seeds, intravescial chemo" , "EBRT"),
    radiation_type = str_replace(radiation_type,"EBRT, TURP" , "EBRT"),
    radiation_type = str_replace(radiation_type,"EBRT,brachytherapy,TURBT" , "EBRT,brachytherapy"),
    radiation_type = str_replace(radiation_type,"EBRT,seed implant, lupron" , "EBRT"),
    radiation_type = str_replace(radiation_type,"IMRT boost" , "IMRT"),
    radiation_type = str_replace(radiation_type,"IMRT/tomo" , "IMRT"),
    radiation_type = str_replace(radiation_type,"Mixed neutron and Photon IMRT" , "mixed_neutron_photon_IMRT"),
    radiation_type = str_replace(radiation_type,"mixed neutron/photon EBRT" , "mixed_neutron_photon_EBRT"),
    radiation_type = str_replace(radiation_type,"Neutron Irradiation and Intensity-Modulated Photon Therapy (IMRT)" , "IMRT"),
    radiation_type = str_replace(radiation_type,"Neutron/photon IMRT" , "mixed_neutron_photon_IMRT"),
    radiation_type = str_replace(radiation_type,"photon EBRT" , "mixed_neutron_photon_EBRT"),
    radiation_type = str_replace(radiation_type,"photon/neutron mixed EBRT" , "mixed_neutron_photon_EBRT"),
    radiation_type = str_replace(radiation_type,"radical prostactomey, Adjuvant radiation" , "adjuvant"),
    radiation_type = str_replace(radiation_type,"Salvage EBRT" , "EBRT,salvage"),
    
    # The previous method str_replace did not work with these observations
    radiation_type = ifelse(row_number() == 19, "IMRT", radiation_type),
    radiation_type = ifelse(row_number() == 22, "mixed_neutron_photon_IMRT", radiation_type),
    radiation_type = ifelse(row_number() == 39, "EBRT,adjuvant", radiation_type),
    radiation_type = ifelse(row_number() == 43, "EBRT,salvage", radiation_type),
    radiation_type = ifelse(row_number() == 51, "IMRT", radiation_type),
    radiation_type = ifelse(row_number() == 57, "mixed_neutron_photon_EBRT", radiation_type),
    radiation_type = ifelse(row_number() == 59, "mixed_neutron_photon_EBRT", radiation_type),
    radiation_type = ifelse(row_number() == 65, "EBRT", radiation_type),
    radiation_type = ifelse(row_number() == 68, "mixed_neutron_photon_EBRT", radiation_type),
    radiation_type = ifelse(row_number() == 72, "adjuvant", radiation_type),
    radiation_type = ifelse(row_number() == 79, "mixed_neutron_photon_EBRT,adjuvant", radiation_type),
    
    # have the naming into lower caps to fit the other datasets 
    radiation_type = tolower(radiation_type)
    )
```

### Save the data as 02_dat_clean1.tsv in data folder

```{r}
# Save clean data from sheet 1
write.table(x = dat_load1,
            file = "~/group_18_project/data/02_dat_clean1.tsv", 
            sep = "\t", 
            quote = TRUE,
            row.names = FALSE)
```

## Clean dat_load2 and dat_load_3

The `select` and `rename` functions from `dplyr` were used to remove irrelevant columns, after which the `bind_rows` function was applied to merge datasets (`dat_load2` and `dat_load3`) and handled missing values. Then, the `pivot_longer` function from `tidyverse` was used to create a 'treatment' column, to represent the different types of treatments in a unified way.

```{r}
# Remove column from the variables and columns that don't exist in patient_info2
dat_load2 <- dat_load2 |> 
  select(-rads_for_prostate_primary, 
         -rads_bladder_primary, 
         -developed_bladder_first,
         -developed_prostate_first)

# Change variable in patient_info1 blader_ca to blader as in patient_info2
dat_load2 <- dat_load2 |>
  rename(bladder = "bladder_ca")
 
# Merge patient_info1 and patient_info2
combined_dat_load2_load3 <- bind_rows(dat_load2, dat_load3)

# Make rename hc as hc_incidence and remove no_hc. If obs=1 patient had hc if obs=0 patient didn't have hc 
combined_dat_load2_load3 <- combined_dat_load2_load3 |> 
  rename("hc_incidence" = "hc") |>
  select(-"no_hc")

# Rename the identifier fin to hospital_id 
combined_dat_load2_load3 <- combined_dat_load2_load3|>
  rename(hospital_id = "fin") 

# Rename 
combined_dat_load2_load3 <- combined_dat_load2_load3|>
  rename(prostate_cancer = "prostate", bladder_cancer = "bladder") 

# Combine types of treatment into one column called treatment
combined_dat_load2_load3 <- combined_dat_load2_load3 |>
  pivot_longer(cols = ebrt:brachytherapy,
              names_to = "treatment", 
              values_to = "values",
              values_drop_na = TRUE) |>
  distinct(hospital_id, .keep_all = TRUE) |>
  select(-values)

# Replace NA and Xs for 0 and 1s but yes
combined_dat_load2_load3 <- combined_dat_load2_load3 |> 
   mutate_all(~ ifelse(is.na(.) | tolower(.) == "na", "no", 
                       ifelse(tolower(.) == "x", "yes", .))) 

```

### Save the combined data as 02_dat_clean2.tsv in data folder

```{r}
# Save combined clean data from sheet 2 and sheet 3
write.table(x = combined_dat_load2_load3,
            file = "~/group_18_project/data/02_dat_clean2.tsv", 
            sep = "\t", 
            quote = TRUE,
            row.names = FALSE)
```
