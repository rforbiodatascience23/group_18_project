---
title: "06_analysis_2.qmd"
format: html
editor: visual
---

# Analysis 2

### Principal Component Analysis

By doing a Principal Component Analysis in the data set we will reduce its dimmensionality and figure out if patients cancer organ have similar values in quantitative variables *Grading system, Radiation dosage, Duration of radiation, Number of comorbidities.*

First we load the libraries and data set required to perform this analysis.

```{r}
# Load libraries
library(cowplot)
library(tidyverse)
library(broom)  

# Load data
analysis_2 <- read_tsv(
  file = "~/group_18_project/data/03_dat_aug1.tsv",
  show_col_types = FALSE)
```

Afterwards, we need to look at the data in PC coordinates. To do this, we select the numeric variables we are interested in and scale the data values to unit variance before doing the PCA.

```{r}
# Names of the numeric columns included in PCA
selected_vars <- c("hematuria_grade", "radiation_dosage", "radiation_duration", "num_comorbidities")

# Create a subset without NA values
analysis_2 <- analysis_2 |> 
  select(all_of(selected_vars), cancer_type) |> 
  drop_na() 

# Use the selected numeric columns for PCA and avoid rows with NA values
pca_fit <- analysis_2 |> 
  select(all_of(selected_vars)) |> 
  prcomp(scale = TRUE)  # Perform PCA on scaled data
```

Now, we plot the data in PC coordinates. In this step, we combine the PC coordinates with the original dataset and we color points by its cancer organ. To do this we use the augment() function from broom, which takes as arguments the fitted model and the original data. The columns containing the fitted coordinates are called *'.fittedPC1'*, and *'.fittedPC2'.*

We select the first two PC given that they are the ones which contain a highest variation explained. This will be justified later with a scree plot.

```{r}
pca_biplot<- pca_fit |> 
  augment(analysis_2) |>  # add original dataset back in
  drop_na() |>  
  ggplot(aes(.fittedPC1, .fittedPC2, color = cancer_type)) + 
  geom_point(size = 2.5) +
  labs(color = "Cancer type")+
  xlab("PC1") +
  ylab("PC2") +
  ggtitle("PCA of patients with cancer and HC") +
  scale_color_manual(
    values = c('prostate' = "#D55E00", 'both' = "#9900b2", 'bladder' = "#0066FF"),
    breaks = c('prostate', 'both', 'bladder'),  
    labels = c('Prostate', 'Prostate and Bladder', 'Bladder')
  ) +
  theme_half_open(12) + background_grid() + 
  theme(
   plot.title = element_text(hjust = 0))

# Save the plot in Results directory
ggsave(
  filename = 'key_plot_2.1.png',
  plot = pca_biplot,
  path = "~/group_18_project/results"
)
```

Look at the data in the PC coordinates.

Plot the rotation matrix.

```{r}
# Load library
library(knitr)

# extract rotation matrix
rotation_matrix <- pca_fit$rotation

# Rounded rotation matrix
rotation_matrix <- round(rotation_matrix, digits = 3)

# Print the rotation matrix as a table
kable(rotation_matrix, caption = "Rotation Matrix in PCA")
```

Arrow plot.

```{r}
# define arrow style for plotting
arrow_style <- arrow(
  angle = 20, ends = "first", type = "closed", length = grid::unit(8, "pt")
)

# plot rotation matrix
pca_fit |> 
  tidy(matrix = "rotation") |> 
  pivot_wider(names_from = "PC", names_prefix = "PC", values_from = "value") |> 
  ggplot(aes(PC1, PC2)) +
  geom_segment(xend = 0, yend = 0, arrow = arrow_style) +
  geom_text(
    aes(label = column),
    hjust = 1, nudge_x = -0.02, 
    color = "#0066FF"
  ) +
  xlim(-1.25, .5) + ylim(-.5, 1) +
  coord_fixed() + # fix aspect ratio to 1:1
  theme_minimal_grid(12)
```

Lastly we will plot the explained variance of each principal component to asses the significance of the PCA obtained before.

```{r}
# Explained variance obtained from the eigenvalues
eigenvalues_df <- pca_fit |> 
  tidy(matrix = "eigenvalues")

# Scree plot
scree_plot <- eigenvalues_df |> 
  ggplot(aes(PC, percent)) +
  geom_col(position = position_dodge(
    preserve = "single"),
    colour = "black",
    alpha = 0.5) +
  xlab("Principal components") +
  ylab("Explained variance (%)") +
  ggtitle("PC explained variance") +
  scale_x_continuous(breaks = 1:9) +
  scale_y_continuous(
    labels = scales::percent_format(),
    expand = expansion(mult = c(0, 0.01))
  ) +
  theme_minimal_hgrid(12) +
  theme(plot.title = element_text(hjust = 0.5))

# Save the plot in Results directory
ggsave(
  filename = 'key_plot_2.2.png',
  plot = scree_plot,
  path = "~/group_18_project/results"
)
```
