---
title: "06_analysis_2.qmd"
format: html
editor: visual
execute:
  message: false
  warning: false
---

# Analysis 2

## Load dat_aug1 from data folder

```{r}
# Load data
analysis_2 <- read_tsv(
  file = "~/group_18_project/data/03_dat_aug1.tsv",
  show_col_types = FALSE)
```

## Key plot 12 - Principal Component Analysis

By doing a Principal Component Analysis in the data set we will reduce its dimmensionality and figure out if patients cancer organ have similar values in quantitative variables *Grading system, Radiation dosage, Duration of radiation, Number of comorbidities.*

Firstly, we need to look at the data in PC coordinates. To do this, we select the numeric variables we are interested in and scale the data values to unit variance before doing the PCA.

```{r}
# Names of the numeric columns included in PCA
selected_vars <- c("hematuria_grade", "radiation_dosage", "radiation_duration", "num_comorbidities")

# Create a subset without NA values
analysis_2_subset <- analysis_2 |> 
  select(all_of(selected_vars), cancer_type) |> 
  drop_na() 

# Use the selected numeric columns for PCA and avoid rows with NA values
pca_fit <- analysis_2_subset |> 
  select(all_of(selected_vars)) |> 
  prcomp(scale = TRUE)  # Perform PCA on scaled data

```

Now, we plot the data in PC coordinates. In this step, we combine the PC coordinates with the original dataset and we color points by its cancer organ. To do this we use the augment() function from broom, which takes as arguments the fitted model and the original data. The columns containing the fitted coordinates are called *'.fittedPC1'*, and *'.fittedPC2'.*

We select the first two PC given that they are the ones which contain a highest variation explained. This will be justified later with a scree plot.

```{r}
pca_biplot<- pca_fit |> 
  augment(analysis_2_subset) |>
  drop_na() |>
  ggplot(aes(.fittedPC1, .fittedPC2, color = cancer_type)) + 
  geom_point(size = 2.5) +
  labs(color = "Cancer type")+
  xlab("PC1") +
  ylab("PC2") +
  ggtitle("PCA of patients with cancer and HC") +
  scale_color_manual(
    values = c('prostate' = "#D55E00", 'bladder' = "#9900b2", 'both' = "#0066FF"),
    breaks = c('prostate', 'bladder', 'both'),  
    labels = c('Prostate', 'Bladder', 'Prostate and bladder')) +
  theme_half_open(12) + background_grid() + 
  theme(
   plot.title = element_text(hjust = 0))

# Save the plot in Results directory
ggsave(
  filename = 'key_plot_12.png',
  plot = pca_biplot,
  path = "~/group_18_project/results"
)
```

Look at the data in the PC coordinates.

## The rotation matrix.

```{r}
# Extract rotation matrix
rotation_matrix <- pca_fit$rotation

# Rounded rotation matrix
rotation_matrix <- round(rotation_matrix, digits = 3)

# Print the rotation matrix as a table
kable(rotation_matrix, caption = "Rotation Matrix in PCA")
```

## Arrow plot.

```{r}
# define arrow style for plotting
arrow_style <- arrow(
  angle = 20, ends = "first", type = "closed", length = grid::unit(8, "pt")
)

# plot rotation matrix
pca_fit |> 
  tidy(matrix = "rotation") |> 
  pivot_wider(names_from = "PC", names_prefix = "PC", values_from = "value") |> 
  ggplot(aes(PC1, PC2)) +
  geom_segment(xend = 0, yend = 0, arrow = arrow_style) +
  geom_text(
    aes(label = column),
    hjust = 1, nudge_x = -0.02, 
    color = "#0066FF"
  ) +
  xlim(-1.25, .5) + ylim(-.5, 1) +
  coord_fixed() + # fix aspect ratio to 1:1
  theme_minimal_grid(12)
```

## Key plot 13 - Variance explained

Lastly we will plot the explained variance of each principal component to asses the significance of the PCA obtained before.

```{r}
# Explained variance obtained from the eigenvalues
eigenvalues_df <- pca_fit |> 
  tidy(matrix = "eigenvalues")

# Scree plot
scree_plot <- eigenvalues_df |> 
  ggplot(aes(PC, percent)) +
  geom_col(position = position_dodge(
    preserve = "single"),
    colour = "black",
    alpha = 0.5) +
  xlab("Principal components") +
  ylab("Explained variance (%)") +
  ggtitle("PC explained variance") +
  scale_x_continuous(breaks = 1:9) +
  scale_y_continuous(
    labels = scales::percent_format(),
    expand = expansion(mult = c(0, 0.01))
  ) +
  theme_minimal_hgrid(12) +
  theme(plot.title = element_text(hjust = 0.5))

# Save the plot in Results directory
ggsave(
  filename = 'key_plot_13.png',
  plot = scree_plot,
  path = "~/group_18_project/results"
)
```

## Key Plot 14 - Correlation Analysis

The plot depicts the correlation between chosen pairs of variables (above a selected threshold), allowing a simple understanding of their relationships. The intensity of the color indicates the strength and direction of the correlation.

```{r}
 
# Get correlation between numeric variables
cor_matrix <- analysis_2 |>
  select_if(is.numeric) |> 
  cor()

# Select a threshold 
threshold <- 0.1

# Check the variables that have correlation values above the threshold
high_correlation_pairs <- which(abs(cor_matrix) > 
                                  threshold & cor_matrix != 1,arr.ind = TRUE)

# Display the variable pairs with high correlation
#high_correlation_pairs

# Extract variable pairs with high correlation
variable_pairs <- high_correlation_pairs[, c("row", "col")]

# Get variable names with high correlation
variable_names <- colnames(cor_matrix)

high_correlation_pairs_names <- variable_names[variable_pairs[, 1]]

# Select variables with high correlation
high_correlation_data <- analysis_2[, high_correlation_pairs_names]

# Create a new correlation matrix for variables with high correlation
high_correlation_matrix <- cor(high_correlation_data)

# Melt the high correlation matrix
high_correlation_df <- melt(high_correlation_matrix)

# Create a ggplot with color representing correlation
correlation_plot <- 
  ggplot(data = high_correlation_df, 
         aes(Var1, Var2, fill = value)) +
  geom_tile() +
  scale_fill_gradientn(colors = brewer.pal(7, "YlGnBu"), name = "Correlation") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text.y = element_text(angle = 45, hjust = 1))

#print(correlation_plot)
ggsave(filename = "key_plot_14.png", 
       plot = correlation_plot,
       path = "~/group_18_project/results", 
       width = 8, height = 6,
       dpi = 300)
```

## Key Plot 15 - Model to predict number of hospitalization days

Scatterplot with a linear regression line, using the **`ggplot2`** package. The plot shows the relationship between the variables **`age_at_radiation`** and **`num_comorbidities`** with respect to the number of days admitted to the hospital (**`num_days_admitted`**). The predicted number of days is shown with different colors. Points that deviate from the regression line may indicate observations with higher or lower than expected days admitted, providing insights into potential patterns or outliers in the data.

```{r}
# Linear regression model
model <- lm(num_days_admitted ~ age_at_radiation + num_comorbidities, data = analysis_2)

# Calculate the R squared 
R2 <- summary(model)$r.squared

# Make predictions
data_for_predicton <- analysis_2 |>
  mutate(predicted_days = predict(model, newdata = analysis_2))

# Create a scatterplot with regression line & R-squared value
model_plot_days_admitted <-
ggplot(data_for_predicton, aes(x = age_at_radiation, y = num_comorbidities, color = predicted_days)) +
  geom_point(aes(size = num_days_admitted)) +
  geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "black") +
  labs(title = "Comparison of Age, Number of Comorbidities, and Number of Hospitalizations",
       x = "Age at Radiation",
       y = "Number of Comorbidities",
       color = "Predicted Days of Admission",
       size = "Actual Days of Admission") +
  scale_color_viridis_c() + 
  theme_minimal() +
  annotate("text", x = Inf, y = Inf, label = paste("RÂ² =", round(R2, 2)), 
           hjust = 1.1, vjust = 1.1, size = 5, color = "black")

print(model_plot_days_admitted)

ggsave(filename = "key_plot_15.png", 
       plot = model_plot_days_admitted,
       path = "~/group_18_project/results", 
       width = 8, height = 6,
       dpi = 300)
```

Residual plots were appied to assess the validity of the linear regression model.

```{r}
# Fit linear regression model
model <- lm(num_days_admitted ~ age_at_radiation + num_comorbidities, data = df)

# Check residual plots
par(mfrow = c(2, 2))  # Set up a 2x2 grid for multiple plots
plot(model)
```
